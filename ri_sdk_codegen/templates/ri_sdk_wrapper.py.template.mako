"""
Autogenerated!
Do not edit manually.
## this is the template. it may and should be edited manually.
"""
<%!
from ri_sdk_codegen.rendering.render_helpers import (
    lib_ctype_param,
    function_param,
    param_text_doc,
    receiver_var_comment,
    prepare_param_for_sdk_call,
    prepare_param_for_sdk_call_result,
    method_description,
    comment_ctype_param,
)
%>
import ctypes

from ri_sdk import loggers, types, utils

from .robointellect_base_sdk import RoboIntellectBaseSDK

log = loggers.wrapper


class RoboIntellectSDK(RoboIntellectBaseSDK):
    def __init__(
        self,
        lib: ctypes.CDLL,
        setup_methods_args: bool = False,
    ) -> None:
        """
        :param lib: RI SDK library .dll or .so
        :param setup_methods_args: whether to configure methods args on init
        """
        super().__init__(lib)
        if setup_methods_args:
            self.setup_all_methods_args_types()

    def setup_all_methods_args_types(self) -> None:
        """
        Установка типов аргументов всех методов.
        :return:
        """
        log.debug("Setup args types for all known SDK methods")
        for name in dir(self):
            if not name.startswith("setup_arg_types_"):
                continue
            method = getattr(self, name)
            method()
        log.debug("Inited args types for all known SDK methods")
##
## autogenerated section below
% for sdk_method in sdk_methods:

    def ${sdk_method.py_method_name}(
        self,
    % for param in sdk_method.func_call_params:
        ${function_param(param)},
    % endfor
    ) -> ${sdk_method.py_method_return_type}:
        ${'"""'}
${method_description(sdk_method)}

        ${sdk_method.url}

    % for param in sdk_method.func_call_params:
${param_text_doc(param)}
    % endfor
        :returns: Результат типа ${sdk_method.py_return_type_cls_name}
        :raises ValueError: если полученный код ошибки не ноль
        ${'"""'}
        # Инициализация получателей
        % for param in sdk_method.func_sdk_receivers:
% if loop.first:
## empty line for spacing

% endif
${receiver_var_comment(param)}
        ${param.py_name} = ctypes.${param.py_ctype}()
        % endfor

        # Код ошибки. Вернётся 0, или будет выброшено исключение
        error_code = self.call_sdk_method(
            # SDK метод. будет вызван внутри (плюс обработка ошибки)
            self.lib.${sdk_method.name},
        % for param in sdk_method.func_sdk_call_args:
            % if sdk_method.is_auto_len_param(param):
    ${param_text_doc(param, add_param_prefix=False)}
            % endif
            ${comment_ctype_param(param)}
            ${prepare_param_for_sdk_call(sdk_method, param)},
        % endfor
        )
        return ${sdk_method.py_method_return_type}(
            error_code,
            % for param in sdk_method.func_sdk_receivers:
            ${prepare_param_for_sdk_call_result(sdk_method, param)},
            % endfor
        )
% endfor
% for sdk_method in sdk_methods:

    def setup_arg_types_for_${sdk_method.py_method_name}(self) -> None:
        ${'"""'}
        Инициализация метода ${sdk_method.name}

        Обращение и документация:
        >>> self.${sdk_method.py_method_name}

        ${sdk_method.url}
        ${'"""'}
        self.lib.${sdk_method.name}.argtypes = [
        % for param in sdk_method.params:
        % if param.name != 'errorCode':
            ${comment_ctype_param(param)}
            ${lib_ctype_param(param)},
        % endif
        % endfor
        ]
% endfor
