{
  "name": "RI_SDK_exec_RServoDrive_RotateByPulseOverTime",
  "url": "https://docs.robointellect.ru/docs/main/risdk/api-executor/api-servodrive-rotate/RI_SDK_exec_RServoDrive_RotateByPulseOverTime",
  "description_blocks": [
    {
      "values": [
        "Вращение, направление и скорость которого, задается через значение импульса.",
        "Вращение выполняется до тех пор, пока не сработает заданный таймаут или не будет вызвана команда остановки."
      ],
      "type": "block"
    },
    {
      "values": [
        "Дает команду сервоприводу с дескриптором descriptor вращаться до тех пор, пока не сработает заданный таймаут или не",
        "будет вызвана функция остановки. Направление и скорость вращения задается параметром pulse, соответствующее значению управляющего импульса.",
        "В параметре timeout передана длительность таймаута, в течении которого будет выполняться вращение.",
        "Параметр async устанавливает режим выполнения команды - асинхронный или синхронный."
      ],
      "type": "block"
    },
    {
      "values": [
        "Размер рабочего диапазона для mg996r - по часовой стрелке 1020 мкс (от 400 до 1420 мкс), против часовой стрелки 1020 мкс (от 1540 до 2560 мкс).",
        "Максимальная скорость при вращении по часовой стрелке достигается при минимальном значении из рабочего диапазона,",
        "для вращения против часовой наоборот, минимальное значение из рабочего диапазона вращает сервопривод с минимальной скоростью.",
        "Для управляющего сигнала между диапазонами вращение не происходит. "
      ],
      "type": "block"
    },
    {
      "values": [
        "Даже в рамках одной и той же модели сервопривода существует погрешность, допускаемая при производстве, которая приводит",
        "к тому, что рабочий диапазон длин импульсов отличается. Для точной работы каждый конкретный сервопривод должен быть",
        "откалиброван: путём экспериментов необходимо подобрать корректный диапазон, характерный именно для него.",
        "С помощью метода инициализации собственного компонента сервопривода вращения",
        "можно инициализировать сервопривод с откалиброванными характеристиками. "
      ],
      "type": "block"
    },
    {
      "values": [
        "При синхронном режиме программа, которая вызвала данную функцию, сначала ожидает её выполнение,",
        "а потом продолжает вызовы других команд. При асинхронном режиме функция вызывается, но ожидания её завершения не",
        "происходит. Другие команды могут перекрыть её выполнение и функция не отработает."
      ],
      "type": "block"
    },
    {
      "values": [
        "Если таймаут задан равным нулю, то будет вызвана функция вращения по импульсу, а таймаут меньше нуля вызовет ошибку."
      ],
      "type": "block"
    }
  ],
  "params": [
    {
      "name": "descriptor",
      "python_type": "int",
      "py_ctype": "c_int",
      "shared_object_type": "int (тип C)",
      "description": "Дескриптор сервопривода",
      "is_pointer": false,
      "pointer_py_ctype": "POINTER"
    },
    {
      "name": "pulse",
      "python_type": "int",
      "py_ctype": "c_int",
      "shared_object_type": "int (тип C)",
      "description": "Значение импульса (микросекунды)",
      "is_pointer": false,
      "pointer_py_ctype": "POINTER"
    },
    {
      "name": "timeout",
      "python_type": "int",
      "py_ctype": "c_int",
      "shared_object_type": "int (тип C)",
      "description": "Значение таймаут (микросекунды)",
      "is_pointer": false,
      "pointer_py_ctype": "POINTER"
    },
    {
      "name": "async",
      "python_type": "bool",
      "py_ctype": "c_bool",
      "shared_object_type": "bool (тип C)",
      "description": "Признак асинхронного выполнения команды",
      "is_pointer": false,
      "pointer_py_ctype": "POINTER"
    },
    {
      "name": "errorText",
      "python_type": "str",
      "py_ctype": "c_char_p",
      "shared_object_type": "char[1000] (тип C)",
      "description": "Текст ошибки (передается как параметр, если происходит ошибка метод записывает в этот параметр текст ошибки)",
      "is_pointer": false,
      "pointer_py_ctype": "POINTER"
    },
    {
      "name": "errorCode",
      "python_type": "int",
      "py_ctype": "c_int",
      "shared_object_type": "int (тип C)",
      "description": "Код ошибки",
      "is_pointer": false,
      "pointer_py_ctype": "POINTER"
    }
  ]
}
